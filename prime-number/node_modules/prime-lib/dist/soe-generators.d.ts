/**
 * Sieve of Eratosthenes (SoE) generators.
 */
/**
 * Postponed SoE algorithm.
 *
 * This implementation is based on the answer by Will Ness:
 * https://stackoverflow.com/questions/2211990/how-to-implement-an-efficient-infinite-generator-of-prime-numbers-in-python/10733621
 */
export declare function sieveInt(): IterableIterator<number>;
/**
 * Postponed SoE algorithm, extended for 'start' logic.
 *
 * This implementation is based on the answer by Will Ness:
 * https://stackoverflow.com/questions/69336435/postponed-sieve-algorithm-with-start-logic/69345662
 */
export declare function sieveIntStart(start: number): IterableIterator<number>;
/**
 * Maximum number of primes for which we can allocate memory to boost performance.
 *
 * To generate quickly 100mln primes we will be allocating about 127MB of RAM.
 * Going beyond that will likely overload any browser or NodeJS client.
 *
 * Also, the current implementation is limited by a sub-32-bit range, capable of
 * producing about 103mln primes, which we round down to 100mln, for simplicity.
 */
export declare const maxBoostLimit = 100000000;
export declare function sieveIntBoost(n: number): IterableIterator<number> & {
    length: number;
};
